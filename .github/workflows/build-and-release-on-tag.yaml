# Based on:
# - https://github.com/crodjer/sysit/blob/v0.4.0/.github/workflows/release.yml
# - https://www.reddit.com/r/rust/comments/o8z614/cross_compiling_rust_binaries_with_github_actions/

# Issue: Rust uses the glibc of the compile-host, and if this is a newer version than the runtime-host the binary will exit with an error.
# - E.g. `/usr/bin/tdog: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /usr/bin/tdog)`
#
# Fix: Use the oldest maintained Ubuntu version so that the binary works on that version and up.
#
# https://www.reddit.com/r/rust/comments/n6udyk/building_rust_binaries_in_ci_that_work_with_older/
# https://kobzol.github.io/rust/ci/2021/05/07/building-rust-binaries-in-ci-that-work-with-older-glibc.html
# https://github.com/rust-lang/libc/issues/1412
# https://stackoverflow.com/questions/11107263/how-compatible-are-different-versions-of-glibc
# https://stackoverflow.com/a/49676568/4949386

# https://sourceware.org/glibc/wiki/Glibc%20Timeline
# Glibc versions: (`ldd --version`)
# - rust:bullseye = (Debian GLIBC 2.31-13) 2.31 (2020-02-01)
# - rust:buster = (Debian GLIBC 2.28-10) 2.28 (2018-08-01)
# - ubuntu:18.04 = (Ubuntu GLIBC 2.27-3ubuntu1.4) 2.27 (2018-02-01)
# - ubuntu:16.04 = (Ubuntu GLIBC 2.23-0ubuntu11.3) 2.23 (2016-02-19)
# - ubuntu:14.04 = (Ubuntu EGLIBC 2.19-0ubuntu6.15) 2.19 (2014-02-07)

name: Build and release on tag.


#on: [ push ]
on:
    push:
        tags:
            - v*
env:
    CARGO_TERM_COLOR: always

permissions:
    contents: write

jobs:
    publish-to-github:
        name: Build Rust CLI and create a GitHub release
        runs-on: ${{matrix.os}}
        strategy:
            matrix:
                include:
                    -   build: linux
                        os: ubuntu-18.04
                        rust: stable
                        target: x86_64-unknown-linux-gnu
                    -   build: macos
                        os: macos-latest
                        rust: stable
                        target: x86_64-apple-darwin
                    -   build: windows
                        os: ubuntu-18.04
                        rust: stable
                        target: x86_64-pc-windows-gnu
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v2
                with:
                    fetch-depth: 1

            # @see https://github.com/actions/cache/blob/main/examples.md#rust---cargo
            -   name: Cache
                uses: actions/cache@v3
                with:
                    path: |
                        ~/.cargo/bin/
                        ~/.cargo/registry/index/
                        ~/.cargo/registry/cache/
                        ~/.cargo/git/db/
                        target/
                    key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            -   name: Install Rust
                run: |
                    rustup install ${{ matrix.rust }}
                    rustup target add ${{ matrix.target }}
                    rustup show

            # Use `cross` to avoid `openssl-sys` crate compilation issues on the Windows OS (E.g. `This perl implementation doesn't produce Unix like paths`).
            -   name: Build (Windows with cross).
                if: matrix.target == 'x86_64-pc-windows-gnu'
                uses: actions-rs/cargo@v1
                with:
                    command: build
                    args: --release --package tdog_cli --target=${{ matrix.target }}
                    use-cross: true


            -   name: Build (macOS, Linux)
                if: matrix.target != 'x86_64-pc-windows-gnu'
                run: |
                    cargo build --release --package tdog_cli --target ${{ matrix.target }}

            -   name: Rename binary file
                shell: bash
                run: |
                    set -e;
                    
                    src=$(pwd)
                    ext=""
                    
                    if [ "${{ matrix.build }}" = "windows" ]
                    then
                        ext=".exe"
                    fi

                    bin=$src/target/${{ matrix.target }}/release/tdog_cli$ext
                    file=tdog-${{ matrix.target }}$ext
                    abs_file=$src/$file
                    
                    cp $bin $abs_file
                    
                    
                    #ls -lha $src/target/${{ matrix.target }}/release/    
                    #echo $bin
                    #echo $abs_file
                    
                    #ls -lha $bin
                    #ls -lha $abs_file
                    
                    # Use a relative file to avoid file path/pattern issues on windows with `softprops/action-gh-release@v1`                   
                    echo "REL_FILE=$file" >> $GITHUB_ENV

            -   name: Release
                uses: softprops/action-gh-release@v1
                if: startsWith(github.ref, 'refs/tags/')
                with:
                    files: |
                        ${{ env.REL_FILE }}